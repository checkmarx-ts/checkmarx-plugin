buildscript {
	repositories {
		jcenter()
		mavenCentral()
		maven { url 'http://repo.jenkins-ci.org/releases/' }
	}
	dependencies {
		classpath 'org.jenkins-ci.tools:gradle-jpi-plugin:0.31.0'
	}
}

plugins { id "no.nils.wsdl2java" version "0.8" }

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'project-report'
apply plugin: 'org.jenkins-ci.jpi'

war {
	doFirst {
		manifest{
			attributes ('Minimum-Java-Version' : "${project.targetCompatibility}")
		}
	}
}


repositories {
	jcenter()
	mavenCentral()
}

test {
	maxParallelForks = Runtime.getRuntime().availableProcessors()
}

//currently there is an issue with Java8 and javadocs,
// Java 8 seems to be really strict with the JavaDoc. This is due to the new doclint for Javadoc
//for now we disable it so we can build the project properly
allprojects {
	tasks.withType(Javadoc).all { enabled = false }
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
}

dependencies {
	compileOnly 'com.intellij:annotations:12.0',
			 'org.slf4j:slf4j-api:1.6.1'

	compile	'com.checkmarx:cx-client-common:8.80.3.PS.0003'


	optionalJenkinsPlugins 'org.jenkins-ci.main:maven-plugin:1.509.3@jar',
			               'org.jenkins-ci.plugins:credentials:1.23@jar'


	testCompile 'junit:junit:4.12',
			'org.eclipse.sisu:org.eclipse.sisu.plexus:0.0.0.M5',
			'org.jmockit:jmockit:1.16',
			'com.google.guava:guava:21.0'


	// Fails with Gradle 2.12 and up without it. Related to https://issues.jenkins-ci.org/browse/JENKINS-17129
	jenkinsTest 'org.jenkins-ci.plugins:ant:1.2@jar',
			'org.jenkins-ci.plugins:mailer:1.1@jar',
			'org.jenkins-ci.plugins:matrix-project:1.4@jar'

}



// Until the Cx-Common-Client is pushed to Maven Central, this downloads the dependency
// from the release under checkmarx-ts/Cx-Client-Common
def cxCommonClientDep = configurations.compile.allDependencies.find {it.name == 'cx-client-common'}
def cxVersion = cxCommonClientDep.version
def rootFileName = "cx-client-common-$cxVersion"
def jarName = rootFileName + ".jar"
def pomName = rootFileName + ".pom"
def groupAsPath = cxCommonClientDep.group.replaceAll ('\\.', '/')
def localMavenCache = "~/.m2/repository/$groupAsPath/$cxCommonClientDep.name/$cxCommonClientDep.version"


task loadCxCommonClient (type: io.github.httpbuilderng.http.HttpTask) {

	config {
        request.uri = 'https://github.com/'
    }
	
	get {
		request.uri.path = "/checkmarx-ts/Cx-Client-Common/releases/download/$cxVersion/$jarName"

		println "Downloading Cx-Common-Client dependency from " + request.uri.toURI ()
		
		response.when(200){ fs, body ->

			// Download the released Cx-Client-Common library
			def curFs = FileSystems.getDefault ()
			def outPath = curFs.getPath (localMavenCache, jarName)
			Files.createDirectories (curFs.getPath (localMavenCache))

			// Write it into the local maven cache
			def outStream = Files.newOutputStream (outPath)
			outStream.write (body)
			outStream.flush ()
			outStream.close ()

			// Extract the pom.xml from the jar
			def jar = new JarFile (outPath.toFile (), false, JarFile.OPEN_READ)
			def pomEntry = jar.getJarEntry ("META-INF/maven/$cxCommonClientDep.group/$cxCommonClientDep.name/pom.xml")
			def pomInStream = jar.getInputStream (pomEntry)

			// Write the pom file into the local maven cache
			def pomPath = curFs.getPath (localMavenCache, pomName)
			def pomOutStream = Files.newOutputStream (pomPath)


			def bufSize = 65536;
			def copyBuff = new byte[bufSize];

			while (true) {
				def readSize = pomInStream.read (copyBuff)
				pomOutStream.write (copyBuff, 0, readSize)
				if (readSize < bufSize)
					break;
			}

			pomOutStream.flush ()
			pomOutStream.close ()
		}
	}
}

task makePackage (dependsOn: build, type: Zip) {

	archiveFileName = "Checkmarx.JenkinsPlugin.${version}.zip"
	destinationDirectory = file("$buildDir/dist")
	from "$buildDir/libs/$jenkinsPlugin.shortName" + ".$jenkinsPlugin.fileExtension"
}

jenkinsPlugin {
	// version of Jenkins core this plugin depends on
	coreVersion = '2.143'

	// short name of the plugin, defaults to the project name without trailing '-plugin'
	shortName = 'checkmarx'

	// human-readable name of plugin
	displayName = 'Jenkins Checkmarx Plugin (PS Supported)'

	// URL for plugin on Jenkins wiki or elsewhere
	url = 'https://wiki.jenkins-ci.org/display/JENKINS/Checkmarx+CxSAST+Plugin'

	// plugin URL on GitHub, optional
	gitHubUrl = 'https://github.com/checkmarx-ts/checkmarx-plugin.git'

	// use the plugin class loader before the core class loader, defaults to false
	pluginFirstClassLoader = true

	// URL used to deploy the plugin, defaults to the value shown
	// repoUrl = 'http://maven.jenkins-ci.org:8081/content/repositories/releases'

	// URL used to deploy snapshots of the plugin, defaults to the value shown
	// snapshotRepoUrl = 'http://maven.jenkins-ci.org:8081/content/repositories/snapshots'

	// enable injection of additional tests for checking the syntax of Jelly and other things
	disabledTestInjection = false

	// the output directory for the localizer task relative to the project root, defaults to the value shown
	localizerOutputDir = "${project.buildDir}/generated-src/localizer"

	developers {	
		developer {
			id 'checkmarxsupport'
			name 'Checkmarx Support'
		}
		developer {
			id 'galdor'
			name 'Gal Dor'
		}
	}
}